name: Build and Release Android APK

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install root dependencies
        run: npm install

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build web assets
        run: npm run build
        working-directory: ./frontend

      - name: Sync web assets to Android project
        run: npx cap sync android
        working-directory: ./frontend

      - name: Set version name
        id: versioning
        run: |
          VERSION_NAME="1.0.${{ github.run_number }}"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" frontend/android/app/build.gradle

      - name: Decode Keystore
        id: decode_keystore
        run: |
          echo "Decoding keystore..."
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > frontend/android/app/release.keystore
          echo "Keystore decoded."
        if: secrets.ANDROID_KEYSTORE_BASE64

      - name: Build signed APK
        id: build_apk
        run: ./gradlew assembleRelease
        working-directory: ./frontend/android
        env:
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        if: steps.decode_keystore.outcome == 'success'

      - name: Find APK
        id: find_apk
        run: |
          APK_PATH=$(find frontend/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "Found APK at $APK_PATH"
        if: steps.build_apk.outcome == 'success'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION_NAME }}
          release_name: Release v${{ env.VERSION_NAME }}
          body: |
            Automated release for version ${{ env.VERSION_NAME }}
          draft: false
          prerelease: false
        if: steps.find_apk.outcome == 'success'

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.APK_PATH }}
          asset_name: app-v${{ env.VERSION_NAME }}.apk
          asset_content_type: application/vnd.android.package-archive
        if: steps.create_release.outcome == 'success'
