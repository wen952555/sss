/* frontend/src/assets/main.css */
/* ... (之前的 html, body, #app, .top-info-bar, button, input, error, game-area 等样式保持不变) ... */
/* 为了简洁，这里只展示与卡片、卡片容器和扇形布局相关的核心改动 */

/* --- 卡片样式 --- */
.card {
  width: 80px !important;  /* 桌面端基础宽度 */
  height: 112px !important; /* 桌面端基础高度 */
  border: none !important; 
  outline: none !important;
  box-sizing: border-box !important; 
  border-radius: 6px !important;
  background-color: #FFFFFF !important; 
  color: #212121 !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  cursor: grab !important;
  user-select: none !important;
  box-shadow: 0px 1px 2px rgba(0,0,0,0.15) !important; /* 恢复一个非常细微的阴影 */
  transition: transform 0.2s ease-out, box-shadow 0.2s ease-out !important; /* 过渡平滑些 */
  overflow: hidden !important;
  padding: 0 !important; 
  margin: 0 !important; /* 移除卡片外边距，由容器的gap或扇形布局控制 */
  position: relative; /* 为扇形布局中的 z-index 和 transform 做准备 */
}
.card img {
  display: block !important;
  width: 100% !important;
  height: 100% !important;
  object-fit: contain !important; 
  pointer-events: none !important;
  border-radius: 5px !important; 
}
.card.dragging { /* 这个class由JS动态添加给拖拽克隆体 */
  opacity: 0.8 !important;
  transform: scale(1.1) rotate(3deg) !important;
  z-index: 2000 !important;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
}

/* --- 卡片容器 --- */
.card-container {
  display: flex !important; 
  /* flex-wrap: wrap; */ /* 默认平铺时允许换行，扇形时由JS或特定CSS控制 */
  gap: 5px !important; 
  min-height: calc(112px + 10px) !important; /* 基于卡片高度 */
  border: 1px dashed rgba(255, 255, 255, 0.2) !important; 
  padding: 8px !important; /* 调整内边距 */
  border-radius: 5px !important;
  position: relative !important; 
  align-items: center !important; /* 平铺时卡片垂直居中 */
  justify-content: center !important; /* 平铺时卡片水平居中 */
  background-color: rgba(0, 0, 0, 0.1) !important; 
  margin-bottom: 8px !important; 
  width: 100% !important; 
  box-sizing: border-box !important;
  overflow: hidden; /* 防止扇形牌溢出容器 */
}
.card-container.is-empty { /* ... (保持不变) ... */ }
.drag-over { /* ... (保持不变) ... */ }
.drop-placeholder { /* ... (保持不变) ... */ }

/* --- 扇形布局特定样式 --- */
.card-container.fan-layout {
  justify-content: center; /* 扇形通常从中间展开 */
  align-items: flex-end; /* 卡片底部对齐，形成扇形弧度 */
  padding-bottom: 20px; /* 给扇形底部留出一些空间 */
  min-height: 150px; /* 扇形可能需要更高的高度 */
}
.fan-layout .card {
  position: absolute; /* 扇形布局中的卡片需要绝对定位 */
  bottom: 5px; /* 控制卡片在容器底部的偏移 */
  transform-origin: bottom center; /* 以卡片底部中心为旋转点 */
  transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); /* 平滑的扇形展开/收起动画 */
  box-shadow: 0px -2px 5px rgba(0,0,0,0.1); /* 扇形卡片阴影向上 */
}
.fan-layout .card:hover {
    transform: translateY(-15px) scale(1.05) !important; /* 鼠标悬停时卡片上移并放大 */
    z-index: 100; /* 确保悬停的卡片在最上面 */
}


/* --- 媒体查询，用于切换布局 --- */
/* 默认是平铺，当屏幕变窄时切换到扇形 */
/* 您可以调整这个断点，例如 768px 或更小 */
@media (max-width: 600px) { /* 假设600px是切换到扇形布局的断点 */
  .card {
    width: 55px !important; /* 手机上扇形卡片的基础宽度 */
    height: 77px !important;
    border-radius: 4px !important;
  }
  .card img { border-radius: 3px !important; }

  /* 针对 player-area 内的特定手牌区应用扇形布局 */
  /* 我们需要在 PlayerHand.vue 中根据条件添加 .fan-layout 类 */
  /* 或者，如果所有 card-container 在小屏幕都应该扇形： */
  /* .card-container { */
  /*   justify-content: center; */
  /*   align-items: flex-end; */
  /*   padding-bottom: 15px; */
  /*   min-height: 120px; */
  /* } */
  /* .card-container .card { */ /* 这个选择器会覆盖上面的 .fan-layout .card */
  /*   position: absolute; */
  /*   bottom: 3px; */
  /*   transform-origin: bottom center; */
  /* } */
}

/* 其他全局样式，如按钮、输入框、App布局等，请沿用上一版能成功构建的 */
/* ... */
